/* --------------------------------------------------------------------------------------------------------
TITLE:: FoscStream


SUMMARY:: Returns a FoscStream.


DESCRIPTION:: A stream.


USAGE::
-------------------------------------------------------------------------------------------------------- */
FoscStream {
    var count=0, <routine;
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    // PUBLIC INSTANCE METHODS: Routine interface
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    /* --------------------------------------------------------------------------------------------------------
    • all
    -------------------------------------------------------------------------------------------------------- */
    all {
        var all;
        all = routine.all;
        if (all.isNil) { ^[] } { ^all };
    }
    /* --------------------------------------------------------------------------------------------------------
    • do
    -------------------------------------------------------------------------------------------------------- */
    do { |func|
        var val;
        this.reset;
        while {
            val = this.next;
            val.notNil;
        } {
            func.value(val, count);
            count = count + 1;
        };
    }
    /* --------------------------------------------------------------------------------------------------------
    • doAdjacentPairs

    '''
    FIXME:  ERROR: Message 'asScore' not understood.

    code::nointerpret
    a = FoscRhythm([3, 4], [1, 2, -2, 1, -1]).render;
    x = FoscIterationAgent(a).byLeaf;
    '''
    -------------------------------------------------------------------------------------------------------- */
    doAdjacentPairs { |func|
        var a, b;
        this.reset;
        while {
            if (count == 0) {
                a = this.next;
                b = this.next;
            } {
                a = b;
                b = this.next;
            };
            b.notNil;
        } {
            func.value(a, b, count);
            count = count + 1;
        };
    }
    /* --------------------------------------------------------------------------------------------------------
    • next
    -------------------------------------------------------------------------------------------------------- */
    next {
        ^routine.next;
    }
    /* --------------------------------------------------------------------------------------------------------
    • nextN
    -------------------------------------------------------------------------------------------------------- */
    nextN { |n|
        ^routine.next(n);
    }
    /* --------------------------------------------------------------------------------------------------------
    • reset
    -------------------------------------------------------------------------------------------------------- */
    reset {
        routine.reset;
        count = 0;
    }
    /* --------------------------------------------------------------------------------------------------------
    • resume
    -------------------------------------------------------------------------------------------------------- */
    resume {
        ^routine.resume;
    }
    /* --------------------------------------------------------------------------------------------------------
    • stop
    -------------------------------------------------------------------------------------------------------- */
    stop {
        ^routine.stop;
    }
    /* --------------------------------------------------------------------------------------------------------
    • value
    -------------------------------------------------------------------------------------------------------- */
    value {
        ^routine.value;
    }
}
