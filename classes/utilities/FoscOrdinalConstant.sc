/* ------------------------------------------------------------------------------------------------------------

TITLE:: FoscOrdinalConstant


SUMMARY:: Returns a FoscOrdinalConstant.


DESCRIPTION:: TODO


USAGE::

'''

• FoscOrdinalConstant

code::
representations = #[\left, \right, \center, \up, \down, \less, \more, \exact];

code::
a = FoscOrdinalConstant('x', -1);
b = FoscOrdinalConstant('x', 1);
a < b;

code::
a = FoscOrdinalConstant('x', 0);
b = FoscOrdinalConstant('y', 1);
a < b;
'''
------------------------------------------------------------------------------------------------------------ */
FoscOrdinalConstant : FoscObject {
	var <dimension, <value, <representation;
	*new { |dimension, value=0, representation|
		^super.new.init(dimension, value, representation);
	}
	init { |argDimension, argValue, argRepresentation|
		dimension = argDimension.asSymbol ? '';
		value = argValue;
		representation = argRepresentation.asSymbol ? '';
	}
	// PUBLIC /////////////////////////////////////////////////////////////////////////////////////////////////
	/* --------------------------------------------------------------------------------------------------------
 '''
	• <
 '''
	-------------------------------------------------------------------------------------------------------- */
	< { |expr|
		this.checkComparator(expr);
		^(value < expr.value);
	}
	/* --------------------------------------------------------------------------------------------------------
 '''
	• >
 '''
	-------------------------------------------------------------------------------------------------------- */
	> { |expr|
		this.checkComparator(expr);
		^(value < expr.value);
	}
	/* --------------------------------------------------------------------------------------------------------
 '''
	• <=
 '''
	-------------------------------------------------------------------------------------------------------- */
	<= { |expr|
		this.checkComparator(expr);
		^(value <= expr.value);
	}
	/* --------------------------------------------------------------------------------------------------------
 '''
	• >=
 '''
	-------------------------------------------------------------------------------------------------------- */
	>= { |expr|
		this.checkComparator(expr);
		^(value >= expr.value);
	}
	/* --------------------------------------------------------------------------------------------------------
 '''
	• ==
 '''
	-------------------------------------------------------------------------------------------------------- */
	== { |expr|
		this.checkComparator(expr);
		^(value == expr.value);
	}
	/* --------------------------------------------------------------------------------------------------------
 '''
	• !=
 '''
	-------------------------------------------------------------------------------------------------------- */
	!= { |expr|
		this.checkComparator(expr);
		^(value != expr.value);
	}

	// PRIVATE ////////////////////////////////////////////////////////////////////////////////////////////////////////
	/* --------------------------------------------------------------------------------------------------------
 '''
	• checkComparator
 '''
	-------------------------------------------------------------------------------------------------------- */
	checkComparator { |expr|
		if (expr.isKindOf(FoscOrdinalConstant).not || { dimension != expr.dimension }) {
			Error("can only compare like-dimensioned ordinal constants.").throw;
		};
	}
}