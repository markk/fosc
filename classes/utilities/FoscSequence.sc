/* ------------------------------------------------------------------------------------------------------------

TITLE:: FoscSequence


SUMMARY:: Returns a FoscSequence.


DESCRIPTION:: TODO


USAGE::

'''

• FoscSequence
'''
------------------------------------------------------------------------------------------------------------ */
FoscSequence : FoscObject {
    var <items;
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    // INIT
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    *new { |items|
        if (items.isSequenceableCollection.not && { items.respondsTo('items') }) {
            items = items.items;
        };
        ^super.newCopyArgs(items);
    }
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    // PUBLIC INSTANCE METHODS
    ///////////////////////////////////////////////////////////////////////////////////////////////////////////
    /* --------------------------------------------------------------------------------------------------------
    '''
    • ==

    code::
    a = FoscSequence(#[1,2,3]);
    b = FoscSequence(#[1,2,3]);
    c = FoscSequence([1,2,4]);
    a == b;
    a == c;
    '''
    -------------------------------------------------------------------------------------------------------- */
    == { |object|
        if (this.species != object.species) { ^false };
        if (this.size != object.size) { ^false };
        items.do { |each, i| if (each != object[i]) { ^false } };
        ^true
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • !=

    code::
    a = FoscSequence(#[1,2,3]);
    b = FoscSequence(#[1,2,3]);
    c = FoscSequence([1,2,4]);
    a != b;
    a != c;
    '''
    -------------------------------------------------------------------------------------------------------- */
    /* --------------------------------------------------------------------------------------------------------
    '''
    • ++

    code::
    a = FoscSequence(#[1,2,3]);
    b = FoscSequence([4,5,6]);
    c = a ++ b;
    c.items;
    '''
    -------------------------------------------------------------------------------------------------------- */
    ++ { |object|
        var localItems, newItems;
        if (this.species != object.species) {
            throw("%:%: can't concatenate objects that are not of the same type: %, %."
                .format(this.species, thisMethod.name, this, object));
        };
        localItems = items.copyImmutable;
        newItems = object.items.copyImmutable;
        newItems = localItems.addAll(newItems);
        ^this.species.new(newItems);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • add

    code::
    a = FoscSequence(#[1,2,3]);
    a.add(4);
    a.items;
    '''
    -------------------------------------------------------------------------------------------------------- */
    add { |item|
        var localItems;
        localItems = items.copyImmutable;
        localItems = localItems.add(item);
        this.instVarPut('items', localItems);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • addAll

    code::
    a = FoscSequence(#[1,2,3]);
    a.addAll([4,5]);
    a.items;
    '''
    -------------------------------------------------------------------------------------------------------- */
    addAll { |items|
        var localItems;
        localItems = this.instVarAt('items').copyImmutable;
        localItems = localItems.addAll(items);
        this.instVarPut('items', localItems);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • any

    code::
    a = FoscSequence(#[1,2,3]);
    a.any { |item| item == 1 };
    a.any { |item| item == 4 };
    '''
    -------------------------------------------------------------------------------------------------------- */
    any { |function|
        ^items.any(function);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • at

    code::
    a = FoscSequence(#[1,2,3]);
    a[1];
    '''
    -------------------------------------------------------------------------------------------------------- */
    at { |index|
        ^items[index];
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • atAll

    code::
    a = FoscSequence(#[1,2,3]);
    a.atAll(#[0,2]);
    a.atAll(#[0,3]);
    '''
    -------------------------------------------------------------------------------------------------------- */
    atAll { |indices|
        ^items.atAll(indices);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • copySeries

    code::
    a = FoscSequence(#[1,2,3]);
    a[1..];
    '''
    -------------------------------------------------------------------------------------------------------- */
    copySeries { |size, start, step|
        ^items.copySeries(size, start, step);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • do

    code::
    a = FoscSequence(#[1,2,3]);
    a.do { |each, i| [each, i].postln };

    post::
    POSTOUTPUT
    '''
    '''
    -------------------------------------------------------------------------------------------------------- */
    do { |function|
        items.do(function);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • doAdjacentPairs

    code::
    a = FoscSequence(#[1,2,3]);
    a.doAdjacentPairs { |a, b, i| [a, b, i].postln };

    post::
    POSTOUTPUT
    '''
    '''
    -------------------------------------------------------------------------------------------------------- */
    doAdjacentPairs { |function|
        items.doAdjacentPairs(function);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • every

    code::
    a = FoscSequence(#[1,2,3]);
    a.every { |item| item < 4 };
    a.every { |item| item > 2 };
    '''
    -------------------------------------------------------------------------------------------------------- */
    every { |function|
        ^items.every(function);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • first

    code::
    a = FoscSequence(#[1,2,3]);
    a.first;
    '''
    -------------------------------------------------------------------------------------------------------- */
    first {
        ^items.first;
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • flat

    code::
    a = FoscSequence(#[[1, 2, 3], [[4, 5], [[6]]]]);
    b = a.flat;
    b.items;
    '''
    -------------------------------------------------------------------------------------------------------- */
    flat {
        var newItems;
        newItems = items.flat;
        ^this.species.new(newItems);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • flatten

    code::
    a = FoscSequence(#[[1, 2, 3], [[4, 5], [[6]]]]);
    
    code::
    b = a.flatten(1);
    b.items;
    
    code::
    c = a.flatten(2);
    c.items;
    '''
    -------------------------------------------------------------------------------------------------------- */
    flatten { |numLevels=1|
        var newItems;
        newItems = items.flatten(numLevels);
        ^this.species.new(newItems);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • hash

    !!!TODO: not yet implemented
    '''
    -------------------------------------------------------------------------------------------------------- */
    /* --------------------------------------------------------------------------------------------------------
    '''
    • includes

    code::
    a = FoscSequence(#[1,2,3]);
    a.includes(2);
    a.includes(4);
    '''
    -------------------------------------------------------------------------------------------------------- */
    includes { |object|
        ^items.includes(object);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • insert

    code::
    a = FoscSequence(#[1,2,3]);
    a.insert(1, 4);
    a.items;
    '''
    -------------------------------------------------------------------------------------------------------- */
    insert { |index, object|
        items = items.insert(index, object);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • indexOf

    code::
    a = FoscSequence(#[1,2,3]);
    a.indexOf(2);
    a.indexOf(4);
    '''
    -------------------------------------------------------------------------------------------------------- */
    indexOf { |item|
        ^items.indexOf(item);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • isEmpty

    code::
    a = FoscSequence(#[1,2,3]);
    a.isEmpty;

    code::
    a = FoscSequence([]);
    a.isEmpty;
    '''
    -------------------------------------------------------------------------------------------------------- */
    isEmpty {
        ^items.isEmpty;
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • last

    code::
    a = FoscSequence(#[1,2,3]);
    a.last;
    '''
    -------------------------------------------------------------------------------------------------------- */
    last {
        ^items.last;
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • lastIndex

    code::
    a = FoscSequence(#[1,2,3]);
    a.lastIndex;
    '''
    -------------------------------------------------------------------------------------------------------- */
    lastIndex {
        ^items.lastIndex;
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • notEmpty

    code::
    a = FoscSequence(#[1,2,3]);
    a.notEmpty;

    code::
    a = FoscSequence([]);
    a.notEmpty;
    '''
    -------------------------------------------------------------------------------------------------------- */
    notEmpty {
        ^items.notEmpty;
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • put

    code::
    a = FoscSequence(#[1,2,3]);
    a[1] = 4;
    a.items;
    '''
    -------------------------------------------------------------------------------------------------------- */
    put { |index, expr|
        items = items.put(index, expr);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • remove

    code::
    a = FoscSequence(#[1,2,3]);
    a.remove(3);
    a.items;
    '''
    -------------------------------------------------------------------------------------------------------- */
    remove { |item|
        ^items.remove(item);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • removeAt

    code::
    a = FoscSequence(#[1,2,3]);
    a.removeAt(1);
    a.items;
    '''
    -------------------------------------------------------------------------------------------------------- */
    removeAt { |index|
        ^items.removeAt(index);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • reverseDo

    code::
    a = FoscSequence(#[1,2,3]);
    a.reverseDo { |each, i| [each, i].postln };

    post::
    POSTOUTPUT
    '''
    '''
    -------------------------------------------------------------------------------------------------------- */
    reverseDo { |function|
        items.reverseDo(function);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • separate
    
    Groups items by predicate function.
    
    code::
    a = FoscSequence([1,2,3,5,6]);
    b = a.separate { |a, b| (b - a) >= 2 };
    b.items;
    '''
    -------------------------------------------------------------------------------------------------------- */
    separate { |function|
        var newItems;
        newItems = items.separate(function);
        ^this.species.new(newItems);
    }
    /* --------------------------------------------------------------------------------------------------------
    '''
    • size

    code::
    a = FoscSequence(#[1,2,3]);
    a.size;
    '''
    -------------------------------------------------------------------------------------------------------- */
    size {
        ^items.size;
    }
}
